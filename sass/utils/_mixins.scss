@mixin spacedFlex($type: space-between) {
   display: flex;
   justify-content: $type;
   align-items: center;
}

@mixin centeredFlex($type: center) {
   display: flex;
   justify-content: $type;
   align-items: center;
}

@mixin reverseFlex($type: row-reverse) {
   display: flex;
   flex-direction: $type;
   align-items: center;
}

@mixin verticalFlexCenter {
   display: flex;
   justify-content: center;
}

@mixin columnFlexDirection {
   display: flex;
   flex-direction: column;
}

@mixin alignFlexCenter {
   display: flex;
   align-items: center;
}

@mixin transitionRules($attribute...) {
   transition-duration: $transition-duration;
   transition-property: $attribute;
   transition-timing-function: $transition-timing-function;
}

@mixin listFlexGap {
   display: flex;
   flex-wrap: wrap;
   margin-top: calc(-1 * #{$flexbox-gap});
   margin-left: calc(-1 * #{$flexbox-gap});
}

@mixin itemFlexGap($number) {
   margin-top: $flexbox-gap;
   margin-left: $flexbox-gap;
   flex-basis: calc((100% - #{$number} * #{$flexbox-gap}) / #{$number});
}

@mixin fontLineWeightLetter($font-size, $line-height, $font-weight, $letter-spacing) {
   font-size: calc(#{$font-size} * 1px);
   font-weight: $font-weight;
   line-height: calc(#{$line-height} / #{$font-size});

   @if ($letter-spacing == "base") {
      letter-spacing: $base-letter-spacing;
   }

   @if ($letter-spacing == "multi") {
      letter-spacing: calc(#{$base-letter-spacing} * 2);
   }

   @if ($letter-spacing == "divide") {
      letter-spacing: calc(#{$base-letter-spacing} / 3);
   }

   @if ($letter-spacing == "convert") {
      letter-spacing: calc((#{$pixel-letter-spacing} / #{$font-size}) * 1em);
   }
}
